// Code generated by MockGen. DO NOT EDIT.
// Source: api/client/i18n/i18n.go

// Package mock_i18n is a generated GoMock package.
package mock_i18n

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockI18nClientInterface is a mock of I18nClientInterface interface.
type MockI18nClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockI18nClientInterfaceMockRecorder
}

// MockI18nClientInterfaceMockRecorder is the mock recorder for MockI18nClientInterface.
type MockI18nClientInterfaceMockRecorder struct {
	mock *MockI18nClientInterface
}

// NewMockI18nClientInterface creates a new mock instance.
func NewMockI18nClientInterface(ctrl *gomock.Controller) *MockI18nClientInterface {
	mock := &MockI18nClientInterface{ctrl: ctrl}
	mock.recorder = &MockI18nClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockI18nClientInterface) EXPECT() *MockI18nClientInterfaceMockRecorder {
	return m.recorder
}

// EmbedT mocks base method.
func (m *MockI18nClientInterface) EmbedT(key, field string, ps ...string) string {
	m.ctrl.T.Helper()
	varargs := []interface{}{key, field}
	for _, a := range ps {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EmbedT", varargs...)
	ret0, _ := ret[0].(string)
	return ret0
}

// EmbedT indicates an expected call of EmbedT.
func (mr *MockI18nClientInterfaceMockRecorder) EmbedT(key, field interface{}, ps ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{key, field}, ps...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmbedT", reflect.TypeOf((*MockI18nClientInterface)(nil).EmbedT), varargs...)
}

// T mocks base method.
func (m *MockI18nClientInterface) T(key string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "T", key)
	ret0, _ := ret[0].(string)
	return ret0
}

// T indicates an expected call of T.
func (mr *MockI18nClientInterfaceMockRecorder) T(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "T", reflect.TypeOf((*MockI18nClientInterface)(nil).T), key)
}

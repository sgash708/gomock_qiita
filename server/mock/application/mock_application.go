// Code generated by MockGen. DO NOT EDIT.
// Source: application.go

// Package mock_application is a generated GoMock package.
package mock_application

import (
	context "context"
	reflect "reflect"
	application "server/api/application"
	model "server/api/domain/model"

	gomock "github.com/golang/mock/gomock"
)

// MockApplicationInterface is a mock of ApplicationInterface interface.
type MockApplicationInterface struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationInterfaceMockRecorder
}

// MockApplicationInterfaceMockRecorder is the mock recorder for MockApplicationInterface.
type MockApplicationInterfaceMockRecorder struct {
	mock *MockApplicationInterface
}

// NewMockApplicationInterface creates a new mock instance.
func NewMockApplicationInterface(ctrl *gomock.Controller) *MockApplicationInterface {
	mock := &MockApplicationInterface{ctrl: ctrl}
	mock.recorder = &MockApplicationInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplicationInterface) EXPECT() *MockApplicationInterfaceMockRecorder {
	return m.recorder
}

// CreateBook mocks base method.
func (m *MockApplicationInterface) CreateBook(ctx context.Context, req *application.CreateBookRequest) (*model.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBook", ctx, req)
	ret0, _ := ret[0].(*model.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBook indicates an expected call of CreateBook.
func (mr *MockApplicationInterfaceMockRecorder) CreateBook(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBook", reflect.TypeOf((*MockApplicationInterface)(nil).CreateBook), ctx, req)
}

// GetBook mocks base method.
func (m *MockApplicationInterface) GetBook(ctx context.Context, uid string) (*model.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBook", ctx, uid)
	ret0, _ := ret[0].(*model.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBook indicates an expected call of GetBook.
func (mr *MockApplicationInterfaceMockRecorder) GetBook(ctx, uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBook", reflect.TypeOf((*MockApplicationInterface)(nil).GetBook), ctx, uid)
}

// GetBooks mocks base method.
func (m *MockApplicationInterface) GetBooks(ctx context.Context) ([]*model.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBooks", ctx)
	ret0, _ := ret[0].([]*model.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBooks indicates an expected call of GetBooks.
func (mr *MockApplicationInterfaceMockRecorder) GetBooks(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBooks", reflect.TypeOf((*MockApplicationInterface)(nil).GetBooks), ctx)
}

// UpdateBook mocks base method.
func (m *MockApplicationInterface) UpdateBook(ctx context.Context, req *application.UpdateBookRequest) (*model.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBook", ctx, req)
	ret0, _ := ret[0].(*model.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBook indicates an expected call of UpdateBook.
func (mr *MockApplicationInterfaceMockRecorder) UpdateBook(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBook", reflect.TypeOf((*MockApplicationInterface)(nil).UpdateBook), ctx, req)
}
